from flask import Flask, jsonify, request 
from sklearn.exceptions import NotFittedError
import pandas as pd
import docx
import io
import json
import joblib
from threading import Thread
from flask_cors import CORS
import concurrent.futures


    
app = Flask(__name__)
CORS(app)
# bcrypt=Bcrypt(app)

def cOPN_thread(str):
    svm1 =joblib.load("model_cOPN.pkl"  ) # Load "model.pkl"
    tfidf = joblib.load("tfidf_cOPN.pki")
    send =tfidf.transform([str])
    temp = svm1.predict(send)
    temp = temp.tolist()
    return temp

    
def cEXT_thread(str):
    svm1 =joblib.load("model_cEXT.pkl"  ) # Load "model.pkl"
    tfidf = joblib.load("tfidf_cEXT.pki")
    send =tfidf.transform([str])
    temp = svm1.predict(send)
    temp = temp.tolist()
    return temp

def cNEU_thread(str):
    svm1 =joblib.load("model_cNEU.pkl"  ) # Load "model.pkl"
    tfidf = joblib.load("tfidf_cNEU.pki")
    send =tfidf.transform([str])
    temp = svm1.predict(send)
    temp = temp.tolist()
    return temp

def cCON_thread(str):
    svm1 =joblib.load("model_cCON.pkl"  ) # Load "model.pkl"
    tfidf = joblib.load("tfidf_cCON.pki")
    send =tfidf.transform([str])
    temp = svm1.predict(send)
    temp = temp.tolist()
    return temp

def cAGR_thread(str):
    svm1 =joblib.load("model_cAGR.pkl"  ) # Load "model.pkl"
    tfidf = joblib.load("tfidf_cAGR.pki")
    send =tfidf.transform([str])
    temp = svm1.predict(send)
    temp = temp.tolist()
    return temp

@app.route('/predict',methods=['GET','POST'])
def predict():
    str=''
    data=''
    if(request.method == 'GET'):
        f = request.files['file']
        print(f)
        content = '\n'.join(p.text for p in docx.Document(f).paragraphs)
        print(type(content))
        df = pd.read_csv(io.StringIO(content))
        print(df)
        
        str=content
        # return 'file uploaded successfully'      
    if(request.method == 'post'):
        data=request.get_json()
        str=data['statment']
    print(str)
      
    output = []
    print(type(str))
    
    with concurrent.futures.ThreadPoolExecutor() as executor:
        output.append(executor.submit(cOPN_thread, str).result())
        output.append(executor.submit(cEXT_thread, str).result())
        output.append(executor.submit(cNEU_thread, str).result())
        output.append(executor.submit(cCON_thread, str).result())
        output.append(executor.submit(cAGR_thread, str).result())
        
    # pool = ThreadPool(processes=1)

    # async_result1 = pool.apply_async(cOPN_thread, [str]) # tuple of args for foo
    # async_result2 = pool.apply_async(cEXT_thread, [str]) # tuple of args for foo
    # output.append(pool.apply_async(cEXT_thread, [str]).get()) # tuple of args for foo
    # async_result3 = pool.apply_async(cNEU_thread, [str]) # tuple of args for foo
    # async_result4 = pool.apply_async(cCON_thread, [str]) # tuple of args for foo
    # async_result5 = pool.apply_async(cAGR_thread, [str]) # tuple of arg

    # do some other stuff in the main process

    # return_val = async_result2.get()
    # output.append(return_val)
   
    # try:
    #     send =tfidf.transform([str])
    # except NotFittedError as e:
    #     print(repr(e))
    # wc = tfidf.fit_transform(x.apply(lambda x: np.str_(x))) # Fit the model
    # send =tfidf.transform([str])
    # output.push(svm1.predict(send))
    
    # return jsonify({'prediction': output})
    return json.dumps({"OUTPUT":output} )

if __name__=='__main__':
    
    app.debug=True
    app.run(host="localhost",port=5000 )
 
